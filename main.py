import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from for_test_file import settings
from functions.function_get_kurs import *
from functions.function_get_datetime import *
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove

logging.basicConfig(level=logging.INFO)

bot = Bot(token='6040960208:AAEwPLomCRMCqtCAtQzKfl1tSh8jq7nYV1Y')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

menu = [
    [InlineKeyboardButton(text="üìù –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="generate_text"),
     InlineKeyboardButton(text="üñº –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate_image")],
    [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data="buy_tokens"),
     InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
    [InlineKeyboardButton(text="üíé –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="ref"),
     InlineKeyboardButton(text="üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã", callback_data="free_tokens")],
    [InlineKeyboardButton(text="üîé –ü–æ–º–æ—â—å", callback_data="help")]
]
menu = InlineKeyboardMarkup(inline_keyboard=menu)
exit_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚óÄÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")]], resize_keyboard=True)
iexit_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="menu")]])


@dp.message_handler(commands=['start', 'info'])
async def start(message: types.Message):
    user = message.from_user
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ –Ø–ø Python. \n –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor/publichnoe-foto-v-telegram-1.jpg'
    photo_caption = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n" \
                    f"information: None\n" \
                    f"Name: {user.first_name}\n" \
                    f"Your tg id: {user.id}\n\n" \
                    f"in developmend\n\n" \
                    f"–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å–æ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rashod"
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption=photo_caption)


@dp.message_handler(commands=['rashod'])
async def rashod(message: types.Message):
    user = message.from_user
    await message.reply('–§—É–Ω–∫—É—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')

    photo_path = '/musor/images.jfif'
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption=f'–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: \n\n'
                                                             f'{user.first_name}, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å....:\n'
                                                             f'{user.id} - —Ç–≤–æ–π ID\n'
                                                             f'–ë—é–¥–∂–µ—Ç: {settings["–±—é–¥–∂–µ—Ç"]}\n'
                                                             f'–¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ —ç—Ç–æ–º –º–µ—Å–µ—Ü–µ: {settings["—Ç–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥"]}\n'
                                                             f'–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞: {settings["–¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞"]}\n'
                                                             f'–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: {settings["–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥"]}')


@dp.message_handler(commands=['kurs'])
async def kurs(message: types.Message):
    user = message.from_user

    photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor\images.jfif'
    text = f'–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –Ω–∞ {print_current_date()} {print_current_time()}:\n' \
           f'üíµ {print_currency_info(1)}'
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption=text)


@dp.message_handler(commands=['schet'])
async def schet(message: types.Message):
    user = message.from_user

    photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor\images.jfif'
    text = ''
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption=text)


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    user = message.from_user

    photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor\images.jfif'
    text = f'‚úîÔ∏è–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É:‚úîÔ∏è \n\n' \
           f'‚ÄºÔ∏è–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –í–∞–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Ä—è–¥–æ–º —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n' \
           f'üî∏–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:üî∏\n\n' \
           f'‚≠ê –°–æ–≤–µ—Ç—ã –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã - –∫–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n' \
           f'‚≠ê –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã - /rashod\n' \
           f'‚≠ê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏ –∑–∞–¥–∞—á –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü - –∫–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n' \
           f'‚≠ê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ -  /schet\n' \
           f'‚≠ê –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç - /kurs\n' \
           f'‚≠ê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤ - /refactor\n' \
           f'‚≠ê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - /settings\n\n' \
           f'üî∏–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É:üî∏\n\n' \
           f'–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —Å–ª–µ–∂–∫–æ–π –∑–∞ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n'
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption=text)


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
