import logging
import telebot
from functions.function_hello_get import *
from functions.valuti import *
from sq_connets.sqlte_connect_files import *
from telebot import types
from functions.daily_citata import *
from functions.function_return_videos import *
from functions.function_return_books_andllll import *
from functions.slovar_finder import *
from functions.return_risk_and_sovet import *
from tests_and_info.soveti_please import *

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot('TOKEN_TG')


@bot.message_handler(commands=['start'])
def register_user(message):
    cursor.execute('SELECT * FROM users WHERE tg_id=?', (message.from_user.id,))
    user = cursor.fetchone()
    user_id_name = message.from_user

    if user is None:
        bot.send_message(message.from_user.id,
                         f'{return_time()}, {user_id_name.first_name}!üëã –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                         f'üìù –í–≤–µ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü: ')
        num1 = random.randint(1, 10)
        num2 = random.randint(1, 10)
        operator = random.choice(['+', '-'])
        if operator == '+':
            result = num1 + num2
        else:
            result = num1 - num2
        example_message = f'–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:\n\n{num1} {operator} {num2} = ?'
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text=str(result), callback_data='registration_success'))
        keyboard.add(types.InlineKeyboardButton(text='–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π', callback_data='registration_failed'))

        bot.send_message(message.from_user.id, example_message, reply_markup=keyboard)

    else:
        bot.send_message(message.from_user.id, '‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == 'registration_success':
        bot.send_message(call.from_user.id, text='‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç!')
        bot.send_message(call.from_user.id,
                         f'{return_time()}, {call.from_user.first_name}! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                         f'–í–≤–µ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü: ')

        bot.register_next_step_handler(call.message, process_budget_step)

    elif call.data == 'registration_failed':

        bot.answer_callback_query(call.from_user.id, text='‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    if call.data == 'add_budget':
        bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞:')
        bot.register_next_step_handler(call.message, add_budget)
    elif call.data == 'add_expense':

        keyboard_catigories = types.InlineKeyboardMarkup()
        keyboard_catigories.add(types.InlineKeyboardButton(text='–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', callback_data='cars'))
        keyboard_catigories.add(types.InlineKeyboardButton(text='–ï–¥–∞', callback_data='food'))
        keyboard_catigories.add(types.InlineKeyboardButton(text='–û–¥–µ–∂–¥–∞', callback_data='cloth'))
        keyboard_catigories.add(types.InlineKeyboardButton(text='–ö–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', callback_data='cofe'))
        keyboard_catigories.add(types.InlineKeyboardButton(text='–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', callback_data='ucheba'))
        keyboard_catigories.add(types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ', callback_data='other'))

        bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:',
                         reply_markup=keyboard_catigories)

    if call.data == 'cars':
        bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: ')
        bot.register_next_step_handler(call.message, function_add_rashodi_cars)
    if call.data == 'food':
        bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:')
        bot.register_next_step_handler(call.message, function_add_rashodi_food)
    if call.data == 'cloth':
        bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:')
        bot.register_next_step_handler(call.message, function_add_rashodi_cloth)
    if call.data == 'cofe':
        bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:')
        bot.register_next_step_handler(call.message, function_add_rashodi_cofe)
    if call.data == 'ucheba':
        bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:')
        bot.register_next_step_handler(call.message, function_add_rashodi_ucheba)
    if call.data == 'other':
        bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:')
        bot.register_next_step_handler(call.message, function_add_rashodi_other)


def process_budget_step(message):
    try:
        budget = int(message.text)

        registration_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''  
            INSERT INTO users (tg_id, budget, expense,
             last_purchase, registration_date, last_update_date, is_registered)
            VALUES (?, ?, 0, "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", ?, ?, 1)
        ''', (message.from_user.id, budget, registration_date, registration_date))
        conn.commit()

        bot.send_message(message.chat.id, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!üéâ')
        user_file_name = str(message.from_user.id) + '.txt'
        with open(f'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/users/{str(user_file_name)}', 'w') as user_file:
            user_file.write('')
        user_file.close()
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—é–¥–∂–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')


@bot.message_handler(commands=['info'])
def start(message):
    user = message.from_user

    photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor/c5fcbc4b-28ba-4d9b-a434-e25353c42cb3.jfif'
    photo_caption = f"{return_time()}, {user.first_name}!üëã\n\n" \
                    f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n" \
                    f"‚ÑπÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–µ–Ω—å:\n\n" \
                    f"üíµ = {function_return_valutes()[0].value}\n" \
                    f"üí∂ = {function_return_valutes()[1].value}\n\n" \
                    f"üï∞ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {print_current_date()} {print_current_time()}\n\n" \
                    f"üßë‚Äçüíº –ò–º—è: {user.first_name}\n" \
                    f"üÜî –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID: {user.id}\n\n" \
                    f"üí° –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å–æ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rashod"
    with open(photo_path, 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption=photo_caption)


@bot.message_handler(commands=['kurs'])
def kurs(message):
    photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor/e41bb881-a9a2-467a-87c8-92e870f618ee.jfif'
    text = f'üìà –ö—É—Ä—Å—ã –≤–µ–¥—É—â–∏—Ö –≤–∞–ª—é—Ç\n' \
           f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {print_current_date()} {print_current_time()}\n\n' \
           f'üí∞ USD - {function_return_valutes()[0].value} ‚ÇΩ\n' \
           f'üí∞ EUR - {function_return_valutes()[1].value} ‚ÇΩ\n' \
           f'üí∞ GBP - {function_return_valutes()[2].value} ‚ÇΩ\n' \
           f'üí∞ KZT - {function_return_valutes()[3].value} ‚ÇΩ\n' \
           f'üí∞ GEL - {function_return_valutes()[4].value} ‚ÇΩ \n' \
           f'üí∞ TRY - {function_return_valutes()[5].value} ‚ÇΩ \n' \
           f'üí∞ CNY - {function_return_valutes()[6].value} ‚ÇΩ\n' \
           f'üí∞ JPY - {function_return_valutes()[7].value} ‚ÇΩ\n'
    with open(photo_path, 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption=text)


@bot.message_handler(commands=['schet'])
def schet(message):
    user = message.from_user

    photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor/349ce560-36a7-4f19-8550-e16c1889d4e7.jfif'
    text = f'{user.first_name}, –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.‚ö†Ô∏è'
    with open(photo_path, 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption=text)


@bot.message_handler(commands=['help'])
def __help(message):
    photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor/vI3cGKkkClY.jpg'
    text = f'‚úîÔ∏è –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É:‚úîÔ∏è \n\n' \
           f'‚ÄºÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –í–∞–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Ä—è–¥–æ–º —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n' \
           f'üî∏ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:üî∏\n\n' \
           f'‚≠ê –°–æ–≤–µ—Ç—ã –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã - /sovet.\n\n    ' \
           f'‚≠ê –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /info\n\n' \
           f'‚≠ê –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–∫—É–ø–æ–∫: /history\n\n' \
           f'‚≠ê –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã - /rashod\n\n' \
           f'‚≠ê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏ –∑–∞–¥–∞—á –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü - –∫–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n' \
           f'‚≠ê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ - /schet\n\n' \
           f'‚≠ê –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç - /kurs\n\n' \
           f'‚≠ê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤ - /refactor\n\n' \
           f'‚≠ê –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–≤ - /video\n\n' \
           f'‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã - /citat\n\n' \
           f'‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–Ω–∏–≥ - /books\n\n' \
           f'‚≠ê –ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - /history\n\n' \
           f'‚≠ê –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - /search\n\n' \
           f'‚≠ê –†–∏—Å–∫–∏ –≤ "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∂–∏–∑–Ω–∏" - /risk\n\n' \
           f'üî∏ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É:üî∏\n\n' \
           f'–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —Å–ª–µ–∂–∫–æ–π –∑–∞ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.‚úÖ\n'
    with open(photo_path, 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption=text)


@bot.message_handler(commands=['rashod'])
def rashod(message):
    user = message.from_user
    cursor.execute('SELECT * FROM users WHERE tg_id=?', (user.id,))
    row = cursor.fetchone()

    if row is not None:
        budget = row[2]
        current_expense = row[3]
        last_purchase = row[4]
        last_update_date = row[6]

        photo_path = 'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/musor/e41bb881-a9a2-467a-87c8-92e870f618ee.jfif'
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∫ –±—é–¥–∂–µ—Ç—É', callback_data='add_budget'))
        keyboard.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∫ —Ä–∞—Å—Ö–æ–¥—É', callback_data='add_expense'))
        with open(photo_path, 'rb') as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=f'{return_time()}, {user.first_name}\n\n'
                        f'üìä –¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: \n\n'
                        f'‚öôÔ∏è {user.first_name}, —Ç–≤–æ—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:‚öôÔ∏è \n'
                        f'üíª ID: {user.id}\n'
                        f'üí∏ –ë—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {budget}\n'
                        f'üí∞ –¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {current_expense}\n'
                        f'‚åöÔ∏è –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞: {last_update_date}\n'
                        f'üè∑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: {last_purchase}', reply_markup=keyboard)

    else:
        bot.reply_to(message, '‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


def function_add_rashodi_cars(message):
    user = message.from_user.id
    messages = message.text
    print(user)
    categories = 'cars'
    with open(f'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/users/{str(user) + ".txt"}', 'a') as user_file:

        user_file.write(f'{categories} - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
    user_file.close()

    cursor.execute('SELECT * FROM users WHERE tg_id=?', (user,))
    row = cursor.fetchone()

    if row is not None:
        current_expense = row[3]
        budget = row[2]
        update_budget = budget - int(messages)
        updated_expense = current_expense + int(messages)
        try:

            cursor.execute('UPDATE users SET expense=?, budget=?, last_purchase=? WHERE tg_id=?',
                           (updated_expense, update_budget, categories, user))
            conn.commit()

            bot.send_message(user, f'‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥: {updated_expense} üí∏')
            cursor.execute('SELECT * FROM rashodi WHERE tg_id=?', (user,))
            rows = cursor.fetchone()
            if rows is not None:
                cars = rows[2]
                updated_expense = cars + int(messages)

                cursor.execute('UPDATE rashodi SET cars=? WHERE tg_id=?',
                               (updated_expense, user))
                conn.commit()
        except OverflowError:
            bot.send_message(user, '–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.')

    else:
        bot.send_message(user,
                         '‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


def function_add_rashodi_food(message):
    user = message.from_user.id
    messages = message.text
    categories = 'food'
    with open(f'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/users/{str(user) + ".txt"}', 'a') as user_file:

        user_file.write(f'{categories} - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
    user_file.close()

    cursor.execute('SELECT * FROM users WHERE tg_id=?', (user,))
    row = cursor.fetchone()

    if row is not None:
        current_expense = row[3]
        budget = row[2]
        update_budget = budget - int(messages)
        updated_expense = current_expense + int(messages)

        cursor.execute('UPDATE users SET expense=?, budget=?, last_purchase=? WHERE tg_id=?',
                       (updated_expense, update_budget, categories, user))
        conn.commit()

        bot.send_message(user, f'‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥: {updated_expense} üí∏')
        cursor.execute('SELECT * FROM rashodi WHERE tg_id=?', (user,))
        rows = cursor.fetchone()
        if rows is not None:
            food = rows[2]
            updated_expense = food + int(messages)

            cursor.execute('UPDATE rashodi SET food=? WHERE tg_id=?',
                           (updated_expense, user))
            conn.commit()

    else:
        bot.send_message(user,
                         '‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


def function_add_rashodi_cloth(message):
    user = message.from_user.id
    messages = message.text
    categories = 'cloth'
    with open(f'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/users/{str(user) + ".txt"}', 'a') as user_file:

        user_file.write(f'{categories} - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
    user_file.close()

    cursor.execute('SELECT * FROM users WHERE tg_id=?', (user,))
    row = cursor.fetchone()

    if row is not None:
        current_expense = row[3]
        budget = row[2]
        update_budget = budget - int(messages)
        updated_expense = current_expense + int(messages)

        cursor.execute('UPDATE users SET expense=?, budget=?, last_purchase=? WHERE tg_id=?',
                       (updated_expense, update_budget, categories, user))
        conn.commit()

        bot.send_message(user, f'‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥: {updated_expense} üí∏')
        cursor.execute('SELECT * FROM rashodi WHERE tg_id=?', (user,))
        rows = cursor.fetchone()
        if rows is not None:
            cloth = rows[2]
            updated_expense = cloth + int(messages)

            cursor.execute('UPDATE rashodi SET cloth=? WHERE tg_id=?',
                           (updated_expense, user))
            conn.commit()

    else:
        bot.send_message(user,
                         '‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


def function_add_rashodi_cofe(message):
    user = message.from_user.id
    messages = message.text
    categories = 'cofe'
    with open(f'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/users/{str(user) + ".txt"}', 'a') as user_file:

        user_file.write(f'{categories} - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
    user_file.close()

    cursor.execute('SELECT * FROM users WHERE tg_id=?', (user,))
    row = cursor.fetchone()

    if row is not None:
        current_expense = row[3]
        budget = row[2]
        update_budget = budget - int(messages)
        updated_expense = current_expense + int(messages)

        cursor.execute('UPDATE users SET expense=?, budget=?, last_purchase=? WHERE tg_id=?',
                       (updated_expense, update_budget, categories, user))
        conn.commit()

        bot.send_message(user, f'‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥: {updated_expense} üí∏')
        cursor.execute('SELECT * FROM rashodi WHERE tg_id=?', (user,))
        rows = cursor.fetchone()
        if rows is not None:
            cofe = rows[2]
            updated_expense = cofe + int(messages)

            cursor.execute('UPDATE rashodi SET cofe=? WHERE tg_id=?',
                           (updated_expense, user))
            conn.commit()

    else:
        bot.send_message(user,
                         '‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


def function_add_rashodi_ucheba(message):
    user = message.from_user.id
    messages = message.text
    categories = 'ucheba'
    with open(f'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/users/{str(user) + ".txt"}', 'a') as user_file:

        user_file.write(f'{categories} - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
    user_file.close()

    cursor.execute('SELECT * FROM users WHERE tg_id=?', (user,))
    row = cursor.fetchone()

    if row is not None:
        current_expense = row[3]
        budget = row[2]
        update_budget = budget - int(messages)
        updated_expense = current_expense + int(messages)

        cursor.execute('UPDATE users SET expense=?, budget=?, last_purchase=? WHERE tg_id=?',
                       (updated_expense, update_budget, categories, user))
        conn.commit()

        bot.send_message(user, f'‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥: {updated_expense} üí∏')
        cursor.execute('SELECT * FROM rashodi WHERE tg_id=?', (user,))
        rows = cursor.fetchone()
        if rows is not None:
            ucheba = rows[2]
            updated_expense = ucheba + int(messages)

            cursor.execute('UPDATE rashodi SET ucheba=? WHERE tg_id=?',
                           (updated_expense, user))
            conn.commit()

    else:
        bot.send_message(user,
                         '‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


def function_add_rashodi_other(message):
    user = message.from_user.id
    messages = message.text
    categories = 'other'
    with open(f'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/users/{str(user) + ".txt"}', 'a') as user_file:

        user_file.write(f'{categories} - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
    user_file.close()

    cursor.execute('SELECT * FROM users WHERE tg_id=?', (user,))
    row = cursor.fetchone()

    if row is not None:
        current_expense = row[3]
        budget = row[2]
        update_budget = budget - int(messages)
        updated_expense = current_expense + int(messages)

        cursor.execute('UPDATE users SET expense=?, budget=?, last_purchase=? WHERE tg_id=?',
                       (updated_expense, update_budget, categories, user))
        conn.commit()

        bot.send_message(user, f'‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥: {updated_expense} üí∏')
        cursor.execute('SELECT * FROM rashodi WHERE tg_id=?', (user,))
        rows = cursor.fetchone()
        if rows is not None:
            other = rows[2]
            updated_expense = other + int(messages)

            cursor.execute('UPDATE rashodi SET other=? WHERE tg_id=?',
                           (updated_expense, user))
            conn.commit()

    else:
        bot.send_message(user,
                         '‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


@bot.message_handler(commands=['risk'])
def return_sovet(message):
    user = message.from_user
    bot.send_message(user.id,
                     '–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ä–∏—Å–∫–∞–º–∏,–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Ç–µ–±–µ –Ω–∞ —Ç–≤–æ–µ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø—É—Ç–∏')
    bot.send_message(user.id, function_rabotay_please_ya_zadolbalsya()[0])
    bot.send_message(user.id, function_rabotay_please_ya_zadolbalsya()[1])
    bot.send_message(user.id, function_rabotay_please_ya_zadolbalsya()[2])


@bot.message_handler(commands=['sovet'])
def return_sovet(message):
    user = message.from_user
    bot.send_message(user.id, f'–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç: {function_sovet_last()}')


@bot.message_handler(commands=['search'])
def search_osn(message):
    user = message.from_user
    command_args = message.text.split()

    if len(command_args) < 2:
        bot.reply_to(message, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏–π!')
        return
    else:
        if slovar_find(slovar=slovar_unsorted, a=command_args[1]):
            bot.send_message(user.id,
                             f'{command_args[1]} - {slovar_find(slovar=slovar_unsorted, a=command_args[1])}')

        else:
            bot.send_message(user.id, '–í–∞—à —Ç–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"\n'
                                      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.')


def add_budget(message):
    user = message.from_user.id
    command_args = message.text

    try:
        amount = int(command_args)
    except ValueError:
        bot.send_message(int(user), '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')
        return

    cursor.execute('SELECT * FROM users WHERE tg_id=?', (int(user),))
    row = cursor.fetchone()

    if row is not None:
        budget = row[2]

        updated_budget = budget + amount

        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        try:
            cursor.execute('UPDATE users SET budget=?, last_update_date=? WHERE tg_id=?',
                           (updated_budget, current_time, int(user)))
            conn.commit()

            bot.send_message(int(user), f'‚úÖ –ë—é–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {updated_budget} üí∞')
        except OverflowError:
            bot.send_message(int(user), '–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.')
    else:
        bot.send_message(int(user), '‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


@bot.message_handler(commands=['citat'])
def citat_gets(message):
    user = message.from_user
    bot.send_message(user.id, f'–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è: \n\n {daily_citat}')


@bot.message_handler(commands=['video'])
def videos_get(message):
    user = message.from_user
    bot.send_message(user.id, function_return_and_get_video())


@bot.message_handler(commands=['books'])
def books_get(message):
    user = message.from_user
    bot.send_message(user.id, function_books())


@bot.message_handler(commands=['history'])
def history(message):
    user = message.from_user
    with open(f'C:/Users/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/PycharmProjects/aaaaa/users/{str(user.id) + ".txt"}', 'r') as user_file:
        k = user_file.readlines()
        m = ''
        for i in k:
            m += f'‚ö° {i}'
        bot.send_message(message.from_user.id, text=f'üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–∞—Å—Ö–æ–¥–æ–≤: \n\n {m}')


bot.polling()
